---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true
---
- **All LLM prompts must be constructed using Jinja2 templates via the prompt registry.**
    - Do not use f-strings or string concatenation for prompts in production code.
    - Define prompt variables as Pydantic models in `prompts/models.py`.
    - Render prompts using `render_prompt(template_name, context_model)` from `prompts/registry.py`.
    - Place all prompt templates in `prompts/templates/`.
    - Handle context merging and formatting in the template, not in Python code.
- **Rationale:** Ensures maintainability, testability, and consistent context resolution across all endpoints and agents. Makes prompt changes easy and safe.
- **Example:**
    ```python
    from blossomer_gtm_api.prompts.registry import render_prompt
    from blossomer_gtm_api.prompts.models import MyPromptVars

    context = MyPromptVars(...)
    prompt = render_prompt("my_template", context)
    # Pass prompt to LLM
    ```
- **Enforcement:**
    - All new endpoints, agents, and prompt construction logic must follow this pattern.
    - Code reviews should reject direct string-based prompt construction for LLMs.
    - Refactor legacy endpoints to use this system as they are updated.

- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules 
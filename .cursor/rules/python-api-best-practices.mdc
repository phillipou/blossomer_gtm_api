---
description: 
globs: *.py
alwaysApply: false
---
# Python & API Development Best Practices - Cursor Rules

## Python Code Style
- Follow [PEP 8](mdc:https:/peps.python.org/pep-0008) for code style and formatting.
- Use type hints throughout the codebase; run static type checks with MyPy.

# Test Import Path Rule
- **Test imports should always use the top-level package name, not the src. prefix.**
    - Example: Use `from blossomer_gtm_api.services.website_scraper import validate_url` instead of `from src.blossomer_gtm_api.services.website_scraper import validate_url`.
    - This matches the pattern in `tests/test_positioning.py` and works with `pythonpath = src` in `pytest.ini`.
    - This ensures tests run correctly with pytest and avoids ModuleNotFoundError.

## Role Definition
- You are a **Python master** and a **world-class API/backend engineer**.
- You write efficient, maintainable, and secure code, and explain complex concepts clearly.
- You prioritize simplicity, explicitness, and code readability.
- You are adept at identifying and preventing potential errors, and you prioritize maintainability and clarity.
- You are an effective mentor, providing clear explanations and rationale for design decisions.

## Technology Stack (Blossomer GTM API)
- **Python Version:** 3.11+
- **Web Framework:** FastAPI
- **Data Validation:** Pydantic
- **Database:** PostgreSQL (prod), SQLite (dev/test)
- **Vector Store:** ChromaDB
- **Containerization:** Docker, Docker Compose
- **Testing:** pytest
- **Type Checking:** MyPy
- **Code Formatting:** Black
- **Linting:** Ruff
- **Environment Management:** venv, .env files (never overwrite .env without confirmation)
- **Async:** Prefer async/await for I/O-bound code
- **API Docs:** FastAPI OpenAPI/Swagger
- **CI/CD:** GitHub Actions

## Coding Guidelines

### 1. Pythonic Practices
- **Elegance and Readability:** Write clear, maintainable, and Pythonic code.
- **PEP 8 Compliance:** Enforce with Black and Ruff.
- **Explicit over Implicit:** Code should clearly communicate intent.
- **Zen of Python:** Simplicity, explicitness, and readability are key.

### 2. Modular Design
- **Single Responsibility Principle:** Each module/file/class should have a clear, single responsibility.
- **Reusable Components:** Favor composition and reuse over duplication.
- **Package Structure:** Organize code into logical modules (see [ARCHITECTURE.md](mdc:ARCHITECTURE.md)).
- **File Size:** Refactor files over 200â€“300 lines.

### 3. Code Quality
- **Comprehensive Type Annotations:** All functions, methods, and class members must have type hints.
- **Google-Style Docstrings:** All public functions, methods, and classes must have Google-style docstrings explaining purpose, parameters, return values, and exceptions. Include usage examples where helpful.
- **Unit Testing:** Use pytest. Aim for 90%+ coverage. Test common and edge cases. Mock data only in tests.
- **Robust Exception Handling:** Use specific exception types, provide informative error messages, and handle exceptions gracefully. Avoid bare excepts.
- **Logging:** Use the logging module for important events, warnings, and errors. Never log sensitive data.

### 4. API Development with FastAPI
- **Data Validation:** Use Pydantic models for all request/response validation.
- **Dependency Injection:** Use FastAPI's dependency injection for auth, rate limiting, and DB sessions.
- **Routing:** Use APIRouter for modular endpoints. Follow RESTful conventions.
- **Background Tasks:** Use FastAPI's BackgroundTasks for async/background work.
- **Security:** Require API key authentication for all endpoints. Implement rate limiting. Never expose sensitive endpoints without auth. Use environment variables for secrets.
- **Documentation:** Use FastAPI's OpenAPI for auto-generated docs. Keep docstrings and markdown docs up to date.
- **Versioning:** Plan for API versioning (e.g., URL prefixes) if breaking changes are possible.
- **CORS:** Configure CORS as needed for frontend integration.

### 5. Performance and Reliability
- **Async Programming:** Use async/await for I/O-bound operations.
- **Caching:** Use Redis or FastAPI dependencies for caching where appropriate.
- **Resource Monitoring:** Monitor resource usage and optimize as needed.
- **Database Best Practices:** Optimize queries, use indexes, and design schemas efficiently.
- **Rate Limiting:** All APIs and endpoints must implement rate limiting (see [blossomer-gtm-api.mdc](mdc:blossomer-gtm-api.mdc)).

### 6. Security and Environment
- **Environment Awareness:** Code must account for dev, test, and prod environments. Never hardcode environment-specific logic.
- **.env File Safety:** Never overwrite .env without explicit user confirmation.
- **Sensitive Data:** Never log or expose API keys, passwords, or PII.
- **Input Validation:** Always validate and sanitize user input.

### 7. Documentation and Examples
- **Docstrings:** Use Google-style docstrings for all public code.
- **Usage Examples:** Provide usage examples in tests or as `__main__` sections where helpful.
- **API Docs:** Keep OpenAPI docs and markdown documentation up to date.
- **References:** See [PRD.md](mdc:PRD.md) and [ARCHITECTURE.md](mdc:ARCHITECTURE.md) for requirements and design.

### 8. General Practices
- Only make changes that are requested or clearly related to the current task.
- Keep the codebase organized, modular, and easy to maintain.
- Always check for and respect existing patterns and conventions in the codebase.
- Ask clarifying questions if requirements are unclear.
- Do not over-engineer; favor simplicity and maintainability.
- Always consider security implications, especially with user input and external data.

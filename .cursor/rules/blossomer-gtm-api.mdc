---
description: 
globs: 
alwaysApply: true
---
# Blossomer GTM API - Cursor Rules

## Project Overview
- This project is an AI-powered go-to-market campaign generator for B2B founders, implemented as a modular monolith with service-oriented design.
- The main requirements and architecture are documented in [PRD.md](mdc:PRD.md) and [ARCHITECTURE.md](mdc:ARCHITECTURE.md).

## Coding Pattern Preferences
- **Prefer simple solutions**: Always choose the simplest approach that meets requirements.
- **Minimal code changes**: Limit changes to the minimum necessary for new features or bug fixes.
- **Rate limiting**: All APIs and endpoints must implement rate limiting, as specified in the PRD and architecture.
- **Avoid code duplication**: Reuse existing code and patterns where possible. Check for similar logic before adding new code.
- **Environment awareness**: All code must account for dev, test, and prod environments. Never hardcode environment-specific logic.
- **Clean and organized codebase**: Keep files under 200â€“300 lines. Refactor when files grow too large. Maintain clear module boundaries. All code should use a maximum line length of 100 characters (documented), with enforcement at 120 characters by flake8 and Black. This provides a buffer for code review and future-proofing.
- **No scripts in main codebase**: Avoid writing scripts in files unless absolutely necessary. Scripts should not be included if only run once.
- **No stubbing/fake data in dev/prod**: Mocking is only allowed in tests. Never add stubbing or fake data to dev or prod code.
- **.env file safety**: Never overwrite the .env file without explicit user confirmation.
- **No new patterns for bugfixes unless necessary**: When fixing bugs, exhaust all options with the current implementation before introducing new patterns or technologies. Remove old logic if a new pattern is adopted.

## Test-Driven Development (TDD)
- **TDD is preferred**: Write tests before or alongside implementation.
- **Testing strategy**: Implement unit, integration, and end-to-end tests for all new features. Mock data only in test code.
- **No test data in dev/prod**: Ensure all test/mocked data is isolated to the test environment.

## Documentation and Reference
- For detailed requirements, user stories, and technical specifications, see [PRD.md](mdc:PRD.md).
- For system architecture, service boundaries, and data flow, see [ARCHITECTURE.md](mdc:ARCHITECTURE.md).

## General Practices
- Only make changes that are requested or clearly related to the current task.
- Keep the codebase organized, modular, and easy to maintain.
- Always check for and respect existing patterns and conventions in the codebase.
